{"exec_count":161,"input":"#I would like to try lemmatizing our sentences to compare to stemming. But so far haven't figured out how to do it correctly\n#import textblob\n#from textblob import TextBlob\n#from textblob import Word\n\n#ProjectData['sentence'].apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split() if x not in stop]))","state":"done","pos":10,"cell_type":"code","type":"cell","id":"c8dad2","kernel":"sagemath"}
{"exec_count":164,"input":"","state":"done","pos":12,"cell_type":"code","type":"cell","id":"68e0ee","kernel":"sagemath"}
{"exec_count":166,"start":1538332095893,"input":"import numpy as np\nimport pandas as pd\nimport sklearn\nimport xlrd\nimport matplotlib.pylab as py\nimport nltk as nltk\nimport textblob as textblob\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.colors import ListedColormap\n\n%matplotlib inline","scrolled":true,"state":"done","pos":0,"cell_type":"code","type":"cell","end":1538332095914,"id":"0ee8e4","kernel":"sagemath"}
{"exec_count":167,"start":1538332097032,"input":"from nltk.tokenize import sent_tokenize, word_tokenize","state":"done","pos":1,"cell_type":"code","type":"cell","end":1538332097038,"id":"daca08","kernel":"sagemath"}
{"input":"","pos":11,"type":"cell","id":"80432b","kernel":"sagemath"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>emotion</th>\n      <th>sentence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Neutral</td>\n      <td>How much of the forecast was genuine and how m...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Neutral</td>\n      <td>I did touch them one time you see but of cours...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Neutral</td>\n      <td>We find that choice theorists admit that they ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Neutral</td>\n      <td>Well, here I am with an olive branch.</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Neutral</td>\n      <td>Its rudder and fin were both knocked out, and ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":169}},"exec_count":169,"start":1538332099531,"input":"#subsetting the data, we now have a dataframe of just the emotion and the sentences. \n\nProjectData = PrimaryEmotion[['emotion','sentence']]\nProjectData.head()","state":"done","pos":3,"type":"cell","end":1538332099558,"id":"b985be","kernel":"sagemath"}
{"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>emotion</th>\n      <th>sentence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Neutral</td>\n      <td>[much, forecast, genuine, much, fixed, moot, p...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Neutral</td>\n      <td>[touch, one, time, see, course, nothing, wanted]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Neutral</td>\n      <td>[find, choice, theorists, admit, introduce, st...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Neutral</td>\n      <td>[well, olive, branch]</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Neutral</td>\n      <td>[rudder, fin, knocked, fourfootlong, gash, she...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":160}},"exec_count":160,"start":1538331862336,"input":"# What our dataframe currently looks like. \nProjectData.head()","state":"done","pos":9,"cell_type":"code","type":"cell","end":1538331862364,"id":"d2f698","kernel":"sagemath"}
{"output":{"0":{"more_output":true}},"exec_count":168,"start":1538332098030,"input":"#importing the excell file. make sure it is uploaded in the same folder as the notebook. \n\nPrimaryEmotion = pd.read_csv('emotion.xls')\nPrimaryEmotion","scrolled":true,"state":"done","pos":2,"cell_type":"code","type":"cell","end":1538332098137,"id":"2c4c73","kernel":"sagemath"}
{"output":{"0":{"more_output":true}},"exec_count":173,"input":"# This block finds the \"root\" word. \n# SnoballStemmer was recommended by Dr. Knisely, but I don't think its doing what we want it to do. You can see that it's taken \"e\" off of the end of a few words, for example instead of \"fine\" we have \"fin\". I would like to try Lemmatizing to compare to this stemming package. \nfrom nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import sent_tokenize, word_tokenize\n\nsb = SnowballStemmer(\"english\")\n\nfor w in ProjectData['sentence']:\n    print(sb.stem(w))","scrolled":true,"state":"done","pos":7,"cell_type":"code","type":"cell","id":"665592","kernel":"sagemath"}
{"output":{"0":{"text":"/ext/sage/sage-8.3_1804/local/lib/python2.7/site-packages/sage/repl/ipython_kernel/__main__.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  from sage.repl.ipython_kernel.kernel import SageKernel\n","name":"stderr"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>emotion</th>\n      <th>sentence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Neutral</td>\n      <td>how much of the forecast was genuine and how m...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Neutral</td>\n      <td>i did touch them one time you see but of cours...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Neutral</td>\n      <td>we find that choice theorists admit that they ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Neutral</td>\n      <td>well here i am with an olive branch</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Neutral</td>\n      <td>its rudder and fin were both knocked out and a...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":171}},"exec_count":171,"start":1538332102170,"input":"# In this line I am removing punctuation.\nProjectData['sentence'] = ProjectData['sentence'].str.replace('[^\\w\\s]','')\n\nProjectData.head()","state":"done","pos":5,"cell_type":"code","type":"cell","end":1538332102195,"id":"cca22e","kernel":"sagemath"}
{"output":{"0":{"text":"/ext/sage/sage-8.3_1804/local/lib/python2.7/site-packages/sage/repl/ipython_kernel/__main__.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  from sage.repl.ipython_kernel.kernel import SageKernel\n","name":"stderr"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>emotion</th>\n      <th>sentence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Neutral</td>\n      <td>how much of the forecast was genuine and how m...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Neutral</td>\n      <td>i did touch them one time you see but of cours...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Neutral</td>\n      <td>we find that choice theorists admit that they ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Neutral</td>\n      <td>well, here i am with an olive branch.</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Neutral</td>\n      <td>its rudder and fin were both knocked out, and ...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":170}},"exec_count":170,"start":1538332100499,"input":"# In this first step I am changing all the words to lower case. Haven't figured out this error later\nProjectData['sentence'] = ProjectData['sentence'].apply(lambda x: \" \".join(x.lower() for x in x.split()))\nProjectData.head()","state":"done","pos":4,"cell_type":"code","type":"cell","end":1538332100697,"id":"74c7a0","kernel":"sagemath"}
{"output":{"0":{"text":"/ext/sage/sage-8.3_1804/local/lib/python2.7/site-packages/sage/repl/ipython_kernel/__main__.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n  IPKernelApp.launch_instance(kernel_class=SageKernel)\n","name":"stderr"}},"exec_count":159,"start":1538331858830,"input":"# Here we tokenize the data \"ProjectData\"\n# Not yet sure how to fix the error...\nProjectData['sentence'] = ProjectData['sentence'].apply(word_tokenize)","state":"done","pos":8,"cell_type":"code","type":"cell","end":1538331859456,"id":"ecd910","kernel":"sagemath"}
{"output":{"0":{"text":"/ext/sage/sage-8.3_1804/local/lib/python2.7/site-packages/sage/repl/ipython_kernel/__main__.py:8: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n","name":"stderr"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>emotion</th>\n      <th>sentence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Neutral</td>\n      <td>much forecast genuine much fixed moot point</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Neutral</td>\n      <td>touch one time see course nothing wanted</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Neutral</td>\n      <td>find choice theorists admit introduce style mo...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Neutral</td>\n      <td>well olive branch</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Neutral</td>\n      <td>rudder fin knocked fourfootlong gash shell mea...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":172}},"exec_count":172,"start":1538332103532,"input":"# Now I remove stop words.\n# Note that I used a package that has predefined \"stopwords\" you can google the package \"nltk stopwords list\" to see which words are in the list. This is something we could edit to whatever we want. \n\nfrom nltk.corpus import stopwords\n\nstop = stopwords.words('english')\n\nProjectData['sentence'] = ProjectData['sentence'].apply(lambda x: \" \".join(x for x in x.split() if x not in stop))\n\nProjectData.head()","state":"done","pos":6,"cell_type":"code","type":"cell","end":1538332104356,"id":"a972de","kernel":"sagemath"}
{"type":"cell","id":"0f259e","pos":13,"input":""}
{"type":"cell","id":"30f0e7","pos":14,"input":""}
{"type":"cell","id":"5164ea","pos":15,"input":""}
{"type":"file","last_load":1538327360004}
{"type":"settings","kernel":"sagemath","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.15"}},"trust":true,"kernel_usage":{"cpu":0,"memory":392839168},"kernel_state":"idle"}