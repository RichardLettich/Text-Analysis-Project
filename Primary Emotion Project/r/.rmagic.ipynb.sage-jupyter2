{"type":"cell","id":"0838c7","pos":25,"input":"%%R -o faithful\nlibrary(datasets)\nprint(summary(faithful))","output":{"0":{"data":{"text/plain":"   eruptions        waiting    \n Min.   :1.600   Min.   :43.0  \n 1st Qu.:2.163   1st Qu.:58.0  \n Median :4.000   Median :76.0  \n Mean   :3.488   Mean   :70.9  \n 3rd Qu.:4.454   3rd Qu.:82.0  \n Max.   :5.100   Max.   :96.0  \n"},"output_type":"execute_result","exec_count":17}},"cell_type":"code","exec_count":17}
{"type":"cell","id":"28191d","pos":23,"input":"Plotting in a 2x2 grid via R's `par` command and setting the output canvas size to 800x600 pixels.","cell_type":"markdown"}
{"type":"cell","id":"353ffa","pos":18,"input":"%R plot(a, b, 'b-')","output":{"0":{"data":{"image/png":"afff1613b156120ea407b363d6080f5c8e54f6f1"},"output_type":"execute_result","exec_count":12}},"cell_type":"code","exec_count":12}
{"type":"cell","id":"36073b","pos":16,"input":"print(b)","output":{"0":{"name":"stdout","output_type":"stream","text":"[ 2.  3.  4.  3.  5.  6.  5.  6.  7.  8.]\n"}},"cell_type":"code","exec_count":11}
{"type":"cell","id":"37ec91","pos":22,"input":"%R print(summary(lmod))","output":{"0":{"data":{"text/plain":"\nCall:\nlm(formula = b ~ a)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n -1.00  -0.35   0.10   0.40   0.80 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -1.70000    0.79162  -2.147    0.064 .  \na            0.60000    0.06963   8.617 2.55e-05 ***\n---\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 0.6325 on 8 degrees of freedom\nMultiple R-squared:  0.9027,\tAdjusted R-squared:  0.8906 \nF-statistic: 74.25 on 1 and 8 DF,  p-value: 2.549e-05\n\n"},"output_type":"execute_result","exec_count":15}},"cell_type":"code","exec_count":15}
{"type":"cell","id":"3bbe44","pos":32,"input":"from rpy2 import robjects as ro\nprint(ro.r.summary(pca_usarrest))","output":{"0":{"name":"stdout","output_type":"stream","text":"Importance of components:\n                          Comp.1    Comp.2    Comp.3     Comp.4\nStandard deviation     1.5748783 0.9948694 0.5971291 0.41644938\nProportion of Variance 0.6200604 0.2474413 0.0891408 0.04335752\nCumulative Proportion  0.6200604 0.8675017 0.9566425 1.00000000\n\n"}},"cell_type":"code","exec_count":22}
{"type":"cell","id":"4ae4c0","pos":13,"input":"v","output":{"0":{"data":{"text/plain":"array([ 5.5])"},"output_type":"execute_result","exec_count":9}},"cell_type":"code","exec_count":9}
{"type":"cell","id":"4af312","pos":8,"input":"`%Rget` pulls and converts the data into Python:","cell_type":"markdown"}
{"type":"cell","id":"4b6cab","pos":27,"input":"### Advanced Example: PCA","cell_type":"markdown"}
{"type":"cell","id":"5474c3","pos":20,"input":"Interested in the coefficients?\n\nUse R's slot accessor `$` via a call to R in `%R` to retrieve the coefficients as a NumPy array.","cell_type":"markdown"}
{"type":"cell","id":"5a53b9","pos":31,"input":"The `pca_usarrest` variable references a datastructure from R. Applying R functions via RPy2 directly is no problem.","cell_type":"markdown"}
{"type":"cell","id":"61e396","pos":24,"input":"%%R -w 800 -h 600\npar(mfrow=c(2,2))\nplot(lmod)","output":{"0":{"data":{"image/png":"acea8bdee00f61f78fcecb6cfefe6a6b3a3a4166"},"output_type":"execute_result","exec_count":16}},"cell_type":"code","exec_count":16}
{"type":"cell","id":"664b16","pos":29,"input":"%%R\nprint(summary(pca_usarrest))","output":{"0":{"data":{"text/plain":"Importance of components:\n                          Comp.1    Comp.2    Comp.3     Comp.4\nStandard deviation     1.5748783 0.9948694 0.5971291 0.41644938\nProportion of Variance 0.6200604 0.2474413 0.0891408 0.04335752\nCumulative Proportion  0.6200604 0.8675017 0.9566425 1.00000000\n"},"output_type":"execute_result","exec_count":20}},"cell_type":"code","exec_count":20}
{"type":"cell","id":"710f4b","pos":1,"input":"**This file is part of the [examples collection](https://github.com/sagemath/cloud-examples/) of [the Sagemath Cloud](https://cloud.sagemath.com).**\n\n[Rmagic](http://nbviewer.ipython.org/urls/github.com/ipython/ipython/raw/master/examples/notebooks/R%2520Magics.ipynb)\nis an extension for [IPython](http://ipython.org).\nCheck out the [full IPython notebook](http://nbviewer.ipython.org/urls/github.com/ipython/ipython/raw/master/examples/notebooks/R%2520Magics.ipynb) for additional details!\nIt is based on [RPy2](http://rpy.sourceforge.net/rpy2.html) and allows to seamlessly talk to an underlying R session via an IPython notebook.\n\nTo activate it, see the cell below. There are basically only a few core commands:\n\n* `%R` runs a line of R code, return values can be assigned via `var = %R ...`.\n* `%%R -i <input> -o <output> ...` runs the entire cell in R and `-i` and `-o` specify the variables for input and output.\n* `%Rpush ...` sends the data of a given variable to R.\n* `%Rpull ...` retrieves the variable (namespace is populated) and the data of a variable inside R.\n* `%Rget ...` is similar to `Rpull`, but only retrieves the actual data.","cell_type":"markdown","slide":"-"}
{"type":"cell","id":"72b937","pos":9,"input":"a = %Rget a\n\na","output":{"0":{"data":{"text/plain":"array([  6.5,   7.5,   8.5,   9.5,  10.5,  11.5,  12.5,  13.5,  14.5,  15.5])"},"output_type":"execute_result","exec_count":6}},"cell_type":"code","exec_count":6}
{"type":"cell","id":"7613ae","pos":5,"input":"%%R\nv <- 5.5\na <- seq(10) + v\nprint(summary(a))\nprint(sd(a))","output":{"0":{"data":{"text/plain":"   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   6.50    8.75   11.00   11.00   13.25   15.50 \n[1] 3.02765\n"},"output_type":"execute_result","exec_count":4}},"cell_type":"code","exec_count":4}
{"type":"cell","id":"7e7d2a","pos":14,"input":"`%%R` runs the given cell in R and `-o [variable]` \"outputs\" it to Python","cell_type":"markdown"}
{"type":"cell","id":"7f21ee","pos":26,"input":"%%R\nlibrary(lattice)\nprint(\n    wireframe(volcano,\n              shade = TRUE,\n              zlab = \"\",\n              aspect = c(61.0/87, 0.5),\n              light_source = c(10,0,10)))","output":{"0":{"data":{"image/png":"31434dc231d59893ad78dd13854aab6345202eeb"},"output_type":"execute_result","exec_count":18}},"cell_type":"code","exec_count":18}
{"type":"cell","id":"81a57f","pos":33,"input":"%R print(help(sum))","output":{"0":{"name":"stdout","output_type":"stream","text":"R Help on ‘sum’sum                    package:base                    R Documentation\n\n_\bS_\bu_\bm _\bo_\bf _\bV_\be_\bc_\bt_\bo_\br _\bE_\bl_\be_\bm_\be_\bn_\bt_\bs\n\n_\bD_\be_\bs_\bc_\br_\bi_\bp_\bt_\bi_\bo_\bn:\n\n     ‘sum’ returns the sum of all the values present in its arguments.\n\n_\bU_\bs_\ba_\bg_\be:\n\n     sum(..., na.rm = FALSE)\n     \n_\bA_\br_\bg_\bu_\bm_\be_\bn_\bt_\bs:\n\n     ...: numeric or complex or logical vectors.\n\n   na.rm: logical.  Should missing values (including ‘NaN’) be removed?\n\n_\bD_\be_\bt_\ba_\bi_\bl_\bs:\n\n     This is a generic function: methods can be defined for it directly\n     or via the ‘Summary’ group generic.  For this to work properly,\n     the arguments ‘...’ should be unnamed, and dispatch is on the\n     first argument.\n\n     If ‘na.rm’ is ‘FALSE’ an ‘NA’ or ‘NaN’ value in any of the\n     arguments will cause a value of ‘NA’ or ‘NaN’ to be returned,\n     otherwise ‘NA’ and ‘NaN’ values are ignored.\n\n     Logical true values are regarded as one, false values as zero.\n     For historical reasons, ‘NULL’ is accepted and treated as if it\n     were ‘integer(0)’.\n\n     Loss of accuracy can occur when summing values of different signs:\n     this can even occur for sufficiently long integer inputs if the\n     partial sums would cause integer overflow.  Where possible\n     extended-precision accumulators are used, but this is\n     platform-dependent.\n\n_\bV_\ba_\bl_\bu_\be:\n\n     The sum. If all of ‘...’ are of type integer or logical, then the\n     sum is integer, and in that case the result will be ‘NA’ (with a\n     warning) if integer overflow occurs.  Otherwise it is a length-one\n     numeric or complex vector.\n\n     *NB:* the sum of an empty set is zero, by definition.\n\n_\bS_\b4 _\bm_\be_\bt_\bh_\bo_\bd_\bs:\n\n     This is part of the S4 ‘Summary’ group generic.  Methods for it\n     must use the signature ‘x, ..., na.rm’.\n\n     ‘plotmath’ for the use of ‘sum’ in plot annotation.\n\n_\bR_\be_\bf_\be_\br_\be_\bn_\bc_\be_\bs:\n\n     Becker, R. A., Chambers, J. M. and Wilks, A. R. (1988) _The New S\n     Language_.  Wadsworth & Brooks/Cole.\n\n_\bS_\be_\be _\bA_\bl_\bs_\bo:\n\n     ‘colSums’ for row and column sums.\n\n_\bE_\bx_\ba_\bm_\bp_\bl_\be_\bs:\n\n     ## Pass a vector to sum, and it will add the elements together.\n     sum(1:5)\n     \n     ## Pass several numbers to sum, and it also adds the elements.\n     sum(1, 2, 3, 4, 5)\n     \n     ## In fact, you can pass vectors into several arguments, and everything gets added.\n     sum(1:2, 3:5)\n     \n     ## If there are missing values, the sum is unknown, i.e., also missing, ....\n     sum(1:5, NA)\n     ## ... unless  we exclude missing values explicitly:\n     sum(1:5, NA, na.rm = TRUE)\n     \n"},"1":{"data":{"text/plain":"array(['/projects/sage/sage/local/lib/R//library/base/help/sum'], \n      dtype='|S54')"},"output_type":"execute_result","exec_count":23}},"cell_type":"code","exec_count":23}
{"type":"cell","id":"828534","pos":7,"input":"a","output":{"0":{"ename":"NameError","evalue":"name 'a' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-60b725f10c9c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0ma\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'a' is not defined"]}},"cell_type":"code","exec_count":5}
{"type":"cell","id":"87d84a","pos":21,"input":"coeffs = %R lmod$coefficients\ncoeffs","output":{"0":{"data":{"text/plain":"array([-1.7,  0.6])"},"output_type":"execute_result","exec_count":14}},"cell_type":"code","exec_count":14}
{"type":"cell","id":"971304","pos":28,"input":"%%R -o pca_usarrest\nlibrary(\"stats\")\npca_usarrest <- princomp(USArrests, cor=TRUE)\nprint(summary(pca_usarrest))","output":{"0":{"data":{"text/plain":"Importance of components:\n                          Comp.1    Comp.2    Comp.3     Comp.4\nStandard deviation     1.5748783 0.9948694 0.5971291 0.41644938\nProportion of Variance 0.6200604 0.2474413 0.0891408 0.04335752\nCumulative Proportion  0.6200604 0.8675017 0.9566425 1.00000000\n"},"output_type":"execute_result","exec_count":19}},"cell_type":"code","exec_count":19}
{"type":"cell","id":"9de6d8","pos":15,"input":"%%R -o b\nb <- c(2,3,4,3,5,6,5,6,7,8)\nprint(paste(length(a), \"==\", length(b), \"?\"))","output":{"0":{"data":{"text/plain":"[1] \"10 == 10 ?\"\n"},"output_type":"execute_result","exec_count":10}},"cell_type":"code","exec_count":10}
{"type":"cell","id":"a1d238","pos":3,"input":"import numpy as np","cell_type":"code","exec_count":2}
{"type":"cell","id":"ad9ca6","pos":4,"input":"%R print(seq(10))\n%R print(summary(factor(c(\"a\", \"b\", \"b\", \"a\", \"c\", \"a\", \"c\"))))","output":{"0":{"data":{"text/plain":" [1]  1  2  3  4  5  6  7  8  9 10\n"},"output_type":"execute_result","exec_count":3},"1":{"data":{"text/plain":"a b c \n3 2 2 \n"},"output_type":"execute_result","exec_count":3}},"cell_type":"code","exec_count":3}
{"type":"cell","id":"ae23f6","pos":12,"input":"%Rpull v","cell_type":"code","exec_count":8}
{"type":"cell","id":"c38829","pos":34,"input":"","cell_type":"code","exec_count":0}
{"type":"cell","id":"c6826b","pos":10,"input":"type(a)","output":{"0":{"data":{"text/plain":"numpy.ndarray"},"output_type":"execute_result","exec_count":7}},"cell_type":"code","exec_count":7}
{"type":"cell","id":"cbe061","pos":17,"input":"### Plots\nBasically, they are stright forward. Multiple simultaneous plots are displayed accordingly.","cell_type":"markdown"}
{"type":"cell","id":"d63a87","pos":19,"input":"%%R -o lmod\nlmod <- lm(b ~ a)\nprint(lmod)","output":{"0":{"data":{"text/plain":"\nCall:\nlm(formula = b ~ a)\n\nCoefficients:\n(Intercept)            a  \n       -1.7          0.6  \n\n"},"output_type":"execute_result","exec_count":13}},"cell_type":"code","exec_count":13}
{"type":"cell","id":"d6b256","pos":11,"input":"`%Rpull` is similar, and defines the variable, too:","cell_type":"markdown"}
{"type":"cell","id":"d829e1","pos":30,"input":"%%R\nbiplot(pca_usarrest)","output":{"0":{"data":{"image/png":"7ed1aab78a6c9f4b45095d31fba06e259db77ae2"},"output_type":"execute_result","exec_count":21}},"cell_type":"code","exec_count":21}
{"type":"cell","id":"dc46ca","pos":6,"input":"`a` only exists in R, hence the following error:","cell_type":"markdown"}
{"type":"cell","id":"e63b23","pos":0,"input":"# Rmagic in IPython\n\n_NOTE: When running in CoCalc, this notebook must be run using the Classical Jupyter notebook._","cell_type":"markdown","slide":"-"}
{"type":"cell","id":"f7b1e3","pos":2,"input":"%pylab inline\n%load_ext rpy2.ipython","output":{"0":{"name":"stdout","output_type":"stream","text":"Populating the interactive namespace from numpy and matplotlib\n"}},"cell_type":"code","exec_count":1}
{"type":"file","last_load":1538172678603}
{"type":"settings","kernel":"python2","backend_state":"running","metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.13"},"name":"rmagic.ipynb"},"kernel_state":"idle","kernel_usage":{"cpu":0,"memory":84680704}}